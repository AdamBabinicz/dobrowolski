// Modal.js
import React from "react";
import styled from "styled-components";
import { animated, useSpring } from "react-spring";
import { IoMdClose } from "react-icons/io";

const Background = styled(animated.div)`
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.6);
  z-index: 999;
  pointer-events: ${(props) => (props.isOpen ? "auto" : "none")};
  opacity: ${(props) => (props.isOpen ? 1 : 0)};
  transition: opacity 0.3s ease;
`;

const ModalWrapper = styled(animated.div)`
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: ${(props) => props.theme.body};
  z-index: 1000;
  padding: 2rem;
  border-radius: 10px;
  max-width: 80%;
  max-height: 80%;
  overflow: auto;

  @media (max-width: 48em) {
    width: 75%;
    height: fit-content;
  }
`;

const ModalHeader = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;

  h3 {
    text-align: center !important;
    width: 100%;
  }
`;

const ModalContent = styled.div`
  color: ${(props) => props.theme.text};
  margin-top: 1rem;
`;

const ModalImage = styled.img`
  width: 100%;
  max-height: 400px;
  object-fit: contain;
  border-radius: 10px;
  margin-top: 1rem;
`;

const CloseButton = styled.span`
  color: ${(props) => props.theme.text};
  font-size: 1.5rem;
  cursor: pointer;

  svg {
    position: absolute;
    margin-top: -2.2rem;
    margin-right: -2.5rem;
  }
`;

const Modal = ({ isOpen, onClose, header, content, imgSrc }) => {
  const backgroundAnimation = useSpring({
    opacity: isOpen ? 1 : 0,
    pointerEvents: isOpen ? "auto" : "none",
  });

  const modalAnimation = useSpring({
    opacity: isOpen ? 1 : 0,
    transform: isOpen
      ? `translate(-50%, -50%) scale(1)`
      : `translate(-50%, -50%) scale(0.5)`,
  });

  return (
    <>
      <Background
        style={backgroundAnimation}
        isOpen={isOpen}
        onClick={onClose}
      />
      {isOpen && (
        <ModalWrapper style={modalAnimation}>
          <ModalHeader>
            <h3>{header}</h3>
            <CloseButton onClick={onClose}>
              <IoMdClose />
            </CloseButton>
          </ModalHeader>
          <ModalContent>
            <p>{content}</p>
            {imgSrc && <ModalImage src={imgSrc} alt="Modal Image" />}
          </ModalContent>
        </ModalWrapper>
      )}
    </>
  );
};

export default Modal;


import React, { useState } from "react";
import styled from "styled-components";
import { FaBars, FaTimes, FaSun, FaMoon } from "react-icons/fa";
import { useSpring, animated } from "react-spring";
import { useTheme } from "../ThemeContext";

const HeaderContainer = styled.header`
  background: ${(props) => props.theme.background};
  color: ${(props) => props.theme.color};
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 16px;

  @media (max-width: 768px) {
    padding: 8px;
  }
`;

const Nav = styled.nav`
  display: flex;
  gap: 16px;

  @media (max-width: 768px) {
    display: none;
  }
`;

const MobileMenu = styled(animated.div)`
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: ${(props) => props.theme.background};
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  z-index: 5;
`;

const MenuIcon = styled.div`
  display: none;
  cursor: pointer;
  z-index: 10;

  @media (max-width: 768px) {
    display: block;
  }
`;

const NavLink = styled.a`
  color: ${(props) => props.theme.color};
  text-decoration: none;
  font-size: 20px;
  margin: 16px 0;

  &:hover {
    text-decoration: underline;
  }
`;

const ThemeToggle = styled.div`
  cursor: pointer;
  display: flex;
  align-items: center;
`;

const Header = () => {
  const [isOpen, setIsOpen] = useState(false);
  const { theme, toggleTheme } = useTheme();

  // Definiujemy animację przy pomocy react-spring
  const menuAnimation = useSpring({
    transform: isOpen ? `translateX(0%)` : `translateX(-100%)`, // Przesuń menu w prawo, jeśli isOpen jest true
    opacity: isOpen ? 1 : 0, // Ustaw opację na 1, jeśli isOpen jest true
    config: { duration: 500 }, // Ustaw czas trwania animacji na 300ms
  });

  const handleMenuToggle = () => {
    setIsOpen(!isOpen);
  };

  const closeMenu = () => {
    setIsOpen(false);
  };

  const handleSmoothScroll = (e, targetId) => {
    e.preventDefault();
    const targetElement = document.getElementById(targetId);
    if (targetElement) {
      targetElement.scrollIntoView({ behavior: "smooth" });
      closeMenu();
    }
  };

  return (
    <HeaderContainer id="start">
      <h1>Wacław Dobrowolski</h1>
      <MenuIcon onClick={handleMenuToggle}>
        {isOpen ? (
          <FaTimes size={24} onClick={handleMenuToggle} />
        ) : (
          <FaBars size={24} onClick={handleMenuToggle} />
        )}
      </MenuIcon>
      <Nav>
        <NavLink href="#start" onClick={(e) => handleSmoothScroll(e, "start")}>
          Start
        </NavLink>
        <NavLink
          href="#biografia"
          onClick={(e) => handleSmoothScroll(e, "biografia")}
        >
          Biografia
        </NavLink>
        <NavLink
          href="#gallery-obrazy"
          onClick={(e) => handleSmoothScroll(e, "gallery-obrazy")}
        >
          Obrazy
        </NavLink>
        <NavLink
          href="#wystawy"
          onClick={(e) => handleSmoothScroll(e, "wystawy")}
        >
          Wystawy
        </NavLink>
        <NavLink
          href="#upamietnienie"
          onClick={(e) => handleSmoothScroll(e, "upamietnienie")}
        >
          Upamiętnienie
        </NavLink>
        <ThemeToggle onClick={toggleTheme}>
          {theme === "light" ? <FaMoon size={24} /> : <FaSun size={24} />}
        </ThemeToggle>
      </Nav>
      <MobileMenu style={menuAnimation}>
        <NavLink href="#start" onClick={(e) => handleSmoothScroll(e, "start")}>
          Start
        </NavLink>
        <NavLink
          href="#biografia"
          onClick={(e) => handleSmoothScroll(e, "biografia")}
        >
          Biografia
        </NavLink>
        <NavLink
          href="#gallery-obrazy"
          onClick={(e) => handleSmoothScroll(e, "gallery-obrazy")}
        >
          Obrazy
        </NavLink>
        <NavLink
          href="#wystawy"
          onClick={(e) => handleSmoothScroll(e, "wystawy")}
        >
          Wystawy
        </NavLink>
        <NavLink
          href="#upamietnienie"
          onClick={(e) => handleSmoothScroll(e, "upamietnienie")}
        >
          Upamiętnienie
        </NavLink>
        <ThemeToggle onClick={toggleTheme}>
          {theme === "light" ? <FaMoon size={24} /> : <FaSun size={24} />}
        </ThemeToggle>
      </MobileMenu>
    </HeaderContainer>
  );
};

export default Header;


import React from "react";
import styled from "styled-components";

const Overlay = styled.div`
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 10;
`;

const ModalContainer = styled.div`
  background: ${(props) => props.theme.background};
  color: ${(props) => props.theme.color};
  padding: 24px;
  border-radius: 8px;
  max-width: 500px;
  width: 100%;
  position: relative;
  margin: 0 1rem;
  box-shadow: ${(props) =>
    props.theme.mode === "dark"
      ? "0 2px 8px rgba(255, 255, 255, 0.6)" // Cień dla motywu dark
      : "0 2px 8px rgba(0, 0, 0, 0.2)"}; // Cień dla motywu light
`;

const ModalHeader = styled.h2`
  margin-top: 0;
  text-align: center;
`;

const ModalContent = styled.p`
  margin: 16px 0;
  text-align: left;
`;

const ModalImage = styled.img`
  max-width: 100%;
  border-radius: 8px;
`;

const CloseButton = styled.button`
  position: absolute;
  top: 8px;
  right: 8px;
  background: none;
  border: none;
  color: ${(props) => props.theme.color};
  font-size: 1.5rem;
  cursor: pointer;
`;

const Modal = ({ isOpen, onClose, header, content, imgSrc }) => {
  if (!isOpen) return null;

  return (
    <Overlay onClick={onClose}>
      <ModalContainer onClick={(e) => e.stopPropagation()}>
        <CloseButton onClick={onClose}>&times;</CloseButton>
        <ModalHeader>{header}</ModalHeader>
        <ModalContent>{content}</ModalContent>
        {imgSrc && <ModalImage src={imgSrc} alt="Modal content" />}
      </ModalContainer>
    </Overlay>
  );
};

export default Modal;



import React, { useState } from "react";
import styled from "styled-components";
import img from "../assets/images/1.jfif";
import { FaBars } from "react-icons/fa";
import Button from "./Button";
import Modal from "./hooks/Modal";
import useModal from "./hooks/useModal";

const HomeContainer = styled.section`
  text-align: center;
  background: ${(props) => props.theme.background};
  color: ${(props) => props.theme.color};
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 32px;

  @media (min-width: 768px) {
    margin: 0 auto;
    padding: 64px;
  }
`;

const ContentContainer = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;

  @media (min-width: 768px) {
    flex-direction: row;
    justify-content: space-between;
    align-items: flex-start;
  }
`;

const Title = styled.h2`
  font-size: 1.5rem;
  text-align: center;

  @media (min-width: 768px) {
    font-size: 2rem;
    margin-bottom: 16px;
    /* text-align: left; */
  }
`;

const Description = styled.p`
  margin-bottom: 16px;
  text-align: left;

  @media (min-width: 768px) {
    font-size: 1.2rem;
    line-height: 1.6rem;
  }
`;

const Image = styled.img`
  object-fit: cover;
  width: 100%;
  max-width: 300px;
  margin-top: 16px;

  @media (min-width: 768px) {
    max-width: 400px;
    margin-left: 40px;
    margin-top: 0;
  }
`;

const IconContainer = styled.div`
  display: none;

  @media (max-width: 376px) {
    display: block;
    position: absolute;
    top: 16px;
    right: 16px;
    cursor: pointer;
  }
`;

const Home = () => {
  const { isOpen, openModal, closeModal } = useModal();
  const [click, setClick] = useState(false);

  return (
    <HomeContainer>
      <ContentContainer>
        <div>
          <Title>
            „Jego talent był tęgi, rzetelny, świadomy swoich dróg i&nbsp;celów.”
          </Title>
          <Description>
            Pochodzący z&nbsp;Kresów artysta, znany głównie z&nbsp;rysunków
            i&nbsp;malarstwa, był wrogim krytykiem
            <b> Władysława Strzemińskiego</b> (1893-1952) oraz zdecydowanym
            przeciwnikiem przyznania twórcy unizmu Nagrody Artystycznej Miasta
            Łodzi w&nbsp;1932 roku.
          </Description>
          <Description>
            Tymczasem był to barwny i&nbsp;wszechstronny twórca zasłużony dla
            rozwoju kulturalnego Łodzi w&nbsp;okresie międzywojennym, wręcz
            nadający ton ówczesnemu życiu artystycznemu.
            <br />
            Jednak my skupiamy się teraz na okresie, kiedy artysta przebywał
            w&nbsp;Radomiu.
          </Description>
          <Button label="Zobacz więcej" onClick={openModal} />
        </div>
        <Image src={img} alt="Artwork" />
      </ContentContainer>
      <Modal
        isOpen={isOpen}
        onClose={closeModal}
        header="Mistrz z kresów"
        content="Artysta regularnie wystawiał swoje prace, w tym olejne, akwarele, pastele i rysunki węglem, w okresie międzywojennym w Łodzi. Brał udział w wystawach swojej szkoły, działającej do 1939 roku, oraz w ekspozycjach Grupy Artystów Plastyków „Ryngraf”, którą założył w 1932 roku. Był znaną i cenioną postacią w lokalnym środowisku artystycznym, wystawiając także w Warszawie, Poznaniu i Krakowie. Jego propaństwowe poglądy znalazły wyraz w artykułach publikowanych w ogólnopolskim piśmie „Polska Druga”, którego był wydawcą i redaktorem w latach 30."
        imgSrc={img}
      />
    </HomeContainer>
  );
};

export default Home;
